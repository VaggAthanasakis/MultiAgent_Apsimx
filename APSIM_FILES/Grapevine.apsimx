{
  "$type": "Models.Core.Simulations, Models",
  "Version": 186,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": false,
      "GraphsPerPage": 6,
      "Name": "Replacements",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today",
            "[Clock].Today.Year",
            "[Clock].Today.DayOfYear",
            "[Weather].DaysSinceWinterSolstice   as DAWS",
            "[PlantVariables].Script.Height \t\tas height",
            "[PlantVariables].Script.LAI         as LAIStrip",
            "[PlantVariables].Script.FRadInt     as f.rad.int",
            "[PlantVariables].Script.ET          as transpiration",
            "[PlantVariables].Script.ES          as Es",
            "[PlantVariables].Script.PET         as PET",
            "[PlantVariables].Script.RootDepth   as rootDepth",
            "",
            "[Soil].OutputLayers.SW",
            "sum([Soil].OutputLayers.SWmm)       as psw",
            "[Weather].Rain",
            "[Irrigation].IrrigationApplied as waterApplied",
            "[Soil].SoilWater.Drainage",
            "",
            "[Grapevine].Phenology.CurrentSeason as CurrentSeason",
            "[Grapevine].Phenology.Stage",
            "[Grapevine].Phenology.AccumulatedEmergedTT",
            "[Grapevine].Phenology.BudBurstDOY      as BudBurstDAWS",
            "[Grapevine].Phenology.FloweringDOY     as FloweringDAWS",
            "[Grapevine].Phenology.VeraisonDOY      as VeraisonDAWS",
            "[Grapevine].Phenology.CurrentStageName as CurrentStageName",
            "[Grapevine].Phenology.AccumulatedChillingUnitBeforeWinterPruning",
            "",
            "[Grapevine].Structure.PrimaryBudNo",
            "[Grapevine].Structure.MainStemPopn",
            "[Grapevine].Structure.LeafTipsAppeared",
            "",
            "[Grapevine].Structure.TotalLeavesPerShoot as leaf.no.shoot",
            "[Grapevine].Leaf.InitialisedCohortNo",
            "[Grapevine].Leaf.DeadCohortNo",
            "[Grapevine].Leaf.AppearedCohortNo as leaf.no.shoot.main",
            "[Grapevine].Leaf.CohortSize",
            "[Grapevine].Leaf.Live.NConc",
            "[Grapevine].Leaf.Transpiration",
            "",
            "[Grapevine].Population",
            "[Grapevine].Leaf.LAI/([Grapevine].Population + 0.0000001)          as leaf.area.vine",
            "[Grapevine].Leaf.LAI/([Grapevine].Structure.MainStemPopn + 0.0000001) as leaf.area.shoot",
            "[Grapevine].Leaf.LAIMainStem/([Grapevine].Structure.MainStemPopn + 0.0000001) as leaf.area.shoot.main",
            "[Grapevine].Leaf.LAIBranch/([Grapevine].Structure.MainStemPopn + 0.0000001) as leaf.area.shoot.lateral",
            "",
            "",
            "[Grapevine].Leaf.Fn",
            "[Grapevine].Leaf.Fw",
            "[Grapevine].Leaf.Live.Wt",
            "[Grapevine].Leaf.Live.Wt/([Grapevine].Population + 0.0000001) as leaf.dw.vine ",
            "[Grapevine].Leaf.Live.Wt/([Grapevine].Structure.MainStemPopn + 0.0000001)  as leaf.dw.shoot",
            "",
            "[Grapevine].Shoot.Live.Wt",
            "[Grapevine].Shoot.Live.Wt/([Grapevine].Structure.MainStemPopn + 0.0000001) as shoot.dw.mean",
            "[Grapevine].Shoot.Live.StructuralWt",
            "[Grapevine].Shoot.Live.StorageWt",
            "",
            "[Grapevine].Cane.Live.Wt",
            "[Grapevine].Cane.Live.StructuralWt",
            "[Grapevine].Cane.Live.StorageWt",
            "[Grapevine].Trunk.Live.Wt",
            "[Grapevine].Trunk.Live.StructuralWt",
            "[Grapevine].Trunk.Live.StorageWt",
            "[Grapevine].Trunk.Live.StorageWt/([Grapevine].Trunk.Live.Wt + 0.0000001) as total.NSC.concentration.trunk",
            "[Grapevine].Root.Live.Wt",
            "[Grapevine].StructuralRoot.Live.Wt",
            "[Grapevine].StructuralRoot.Live.StructuralWt",
            "[Grapevine].StructuralRoot.Live.StorageWt",
            "[Grapevine].StructuralRoot.Live.StorageWt/([Grapevine].StructuralRoot.Live.Wt + 0.0000001) as total.NSC.concentration.root",
            "[Grapevine].Root.NTakenUp",
            "[Grapevine].StructuralRoot.N",
            "[Grapevine].Arbitrator.FDM",
            "[Grapevine].Arbitrator.DM.TotalFixationSupply",
            "",
            "[Grapevine].Berry.Live.Wt",
            "[Grapevine].Berry.Live.Wt/([Grapevine].Population + 0.0000001) as TotalBerryDW",
            "[Grapevine].Berry.SingleBerryDW",
            "[Grapevine].Berry.SingleBerryFW     as berry.fw.mean",
            "[Grapevine].Berry.TotalBerryFW/([Grapevine].Population + 0.0000001) as TotalBerryFW",
            "[Grapevine].Berry.NumberFunction",
            "[Grapevine].Berry.ThermalTimeAfterFlowering",
            "[Grapevine].Berry.WaterContent",
            "[Grapevine].Berry.N",
            "[Grapevine].Berry.NFillingRate",
            "[Grapevine].Berry.Brix \t\t\t\tas brix",
            "[Grapevine].Berry.TitratableAcid \tas ta",
            "",
            "[Grapevine].Berry.MetFactors.BUN_TmaxIni_Record    as BUN_TmaxIni",
            "[Grapevine].Berry.MetFactors.BUN_RadIni_Record     as BUN_RadIni",
            "[Grapevine].Berry.MetFactors.BEN_RainTotFlow as BEN_RainTotFlow",
            "[Grapevine].Berry.MetFactors.BEN_TmaxIni_Record    as BEN_TmaxIni_Record",
            "[Grapevine].Berry.MetFactors.BEN_TmaxFlow   as BEN_TmaxFlow",
            "[Grapevine].Berry.MetFactors.BEN_TminFlow   as BEN_TminFlow",
            "[Grapevine].Berry.MetFactors.BM_RadFlow      as BM_RadFlow",
            "[Grapevine].Berry.MetFactors.BM_RainTotFlow  as BM_RainTotFlow",
            "[Grapevine].Berry.MetFactors.BM_RainTotVer   as BM_RainTotVer",
            "[Grapevine].Berry.MetFactors.BM_TmaxFlow    as BM_TmaxFlow",
            "",
            "[Grapevine].Berry.YieldComponent.BunchesPerShoot as bunch.no.shoot",
            "[Grapevine].Berry.YieldComponent.BunchesPerVine  as bunch.no.vine",
            "[Grapevine].Berry.YieldComponent.BerryNum    as BerryNum",
            "[Grapevine].Berry.YieldComponent.BerryMass   as berry.fw.est",
            "[Grapevine].Berry.YieldPerVine               as yield.per.vine",
            "",
            "",
            "",
            "// Note: for converting into field scale, need the strip area, this could be done by multiplying all by Ai/At = Ai/(A1+A2)",
            "[Row].Area",
            "[Alley].Area",
            "[Row].Area/([Alley].Area+[Row].Area + 0.0000001) as Row.FractionArea",
            "[Alley].Area/([Alley].Area+[Row].Area + 0.0000001) as Alley.FractionArea",
            "",
            "[Weather].Radn as TotalRadiation",
            "[Row].Grapevine.Leaf.RadiationIntercepted",
            "[Alley].Slurp.Leaf.RadiationIntercepted",
            "",
            "// Carbon balance (basic)",
            "[Row].Grapevine.AboveGround.Wt",
            "[Row].Grapevine.BelowGround.Wt",
            "([Row].Grapevine.Leaf.Removed.Wt+[Row].Grapevine.Shoot.Removed.Wt+[Row].Grapevine.Cane.Removed.Wt+[Row].Grapevine.Trunk.Removed.Wt+[Row].Grapevine.Berry.Removed.Wt+[Row].Grapevine.StructuralRoot.Removed.Wt+[Row].Grapevine.Root.Removed.Wt) as Row.Grapevine.Removed.Wt",
            "([Row].Grapevine.Leaf.Detached.Wt+[Row].Grapevine.Shoot.Detached.Wt+[Row].Grapevine.Cane.Detached.Wt+[Row].Grapevine.Trunk.Detached.Wt+[Row].Grapevine.Berry.Detached.Wt+[Row].Grapevine.StructuralRoot.Detached.Wt+[Row].Grapevine.Root.Detached.Wt) as Row.Grapevine.Detached.Wt",
            "[Row].SurfaceOrganicMatter.C as Row.SurfaceOM.C",
            "sum([Row].Soil.Nutrient.FOM.C) as Row.SoilFOM.C",
            "sum([Row].Soil.Nutrient.Microbial.C)+sum([Row].Soil.Nutrient.Humic.C) as Row.SoilOM.C",
            "",
            "// Water balance (basic)",
            "[Weather].Rain as Rainfall",
            "[Row].Irrigation.IrrigationApplied as Row.Irrigation",
            "[Row].Soil.SoilWater.Runoff as Row.Runoff",
            "[Row].Soil.SoilWater.Es as Row.Evaporation",
            "[Row].Grapevine.Leaf.Transpiration as Row.Transpiration",
            "[Row].Soil.SoilWater.Drainage as Row.Drainage",
            "sum([Row].Soil.SoilWater.SWmm) as Row.TotalSWC",
            "[Alley].Irrigation.IrrigationApplied as Alley.Irrigation",
            "[Alley].Soil.SoilWater.Runoff as Alley.Runoff",
            "[Alley].Soil.SoilWater.Es as Alley.Evaporation",
            "[Alley].Slurp.Leaf.Transpiration as Alley.Transpiration",
            "[Alley].Soil.SoilWater.Drainage as Alley.Drainage",
            "sum([Alley].Soil.SoilWater.SWmm) as Alley.TotalSWC",
            "sum([Row].Soil.Physical.SATmm) as TotalSAT",
            "sum([Row].Soil.Physical.DULmm) as TotalDUL",
            "sum([Row].Soil.Physical.LL15mm) as TotalLL15",
            "",
            "// Nitrogen balance (basic)",
            "[Row].SurfaceOrganicMatter.N as Row.SurfaceOM.N",
            "sum([Row].Soil.Nutrient.FOM.N) as Row.SoilFOM.N",
            "sum([Row].Soil.Nutrient.Microbial.N)+sum([Row].Soil.Nutrient.Humic.C) as Row.SoilOM.N",
            "[Row].Fertiliser.NitrogenApplied as Row.FertiliserN",
            "sum([Row].Soil.SoilWater.LeachUrea)+sum([Row].Soil.SoilWater.LeachNO3) as Row.LeachedN",
            "sum([Row].Soil.Nutrient.DenitrifiedN) as Row.DenitrifiedN",
            "[Row].Grapevine.Root.NTakenUp*10.0 as Row.UptakeN",
            "sum([Row].Soil.Nutrient.MineralN) as Row.Mineral_N",
            "",
            "",
            "sum([Alley].Soil.Nutrient.MineralN) as Alley.Mineral_N",
            "[Alley].SurfaceOrganicMatter.N as Alley.SurfaceOM.N",
            "sum([Alley].Soil.Nutrient.FOM.N) as Alley.SoilFOM.N",
            "sum([Alley].Soil.Nutrient.Microbial.N)+sum([Alley].Soil.Nutrient.Humic.C) as Alley.SoilOM.N",
            "[Alley].Fertiliser.NitrogenApplied as Alley.FertiliserN",
            "sum([Alley].Soil.SoilWater.LeachUrea)+sum([Alley].Soil.SoilWater.LeachNO3) as Alley.LeachedN",
            "sum([Alley].Soil.Nutrient.DenitrifiedN) as Alley.DenitrifiedN",
            "[Alley].Slurp.Root.NTakenUp*10.0 as Alley.UptakeN",
            "sum([Alley].Slurp.Arbitrator.N.Fixation)*10.0 as Alley.FixedN"
          ],
          "EventNames": [
            "[Clock].DoReport"
          ],
          "GroupByVariableName": null,
          "Name": "Report",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today",
            "[Clock].Today.Year",
            "[Clock].Today.DayOfYear",
            "[Weather].DaysSinceWinterSolstice   as DAWS",
            "[PlantVariables].Script.Height \t\tas height",
            "[PlantVariables].Script.LAI         as LAIStrip",
            "[PlantVariables].Script.FRadInt     as f.rad.int",
            "[PlantVariables].Script.ET          as transpiration",
            "[PlantVariables].Script.ES          as Es",
            "[PlantVariables].Script.PET         as PET",
            "[PlantVariables].Script.RootDepth   as rootDepth",
            "",
            "[Soil].OutputLayers.SW",
            "sum([Soil].OutputLayers.SWmm)       as psw",
            "[Weather].Rain",
            "[Irrigation].IrrigationApplied",
            "[Soil].SoilWater.Drainage",
            "[Alley].Slurp.Leaf.Live.N",
            "[Alley].Slurp.Root.NUptake",
            "[Alley].Slurp.Root.NTakenUp"
          ],
          "EventNames": [
            "[Clock].DoReport"
          ],
          "GroupByVariableName": null,
          "Name": "ReportAlley",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Climate;",
            "using System;",
            "using Models.Core;",
            "using Models.PMF;",
            "using System.Collections.Generic;",
            "using Models.Soils;",
            "using APSIM.Shared.Utilities;",
            "using Models.Zones;",
            "using Models.PMF.Organs;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] private Weather weather;",
            "        private RectangularZone AlleyZone {get; set; }",
            "        private RectangularZone RowZone {get; set;}",
            "        private RectangularZone ThisZone {get; set;}",
            "        private double AreaWidth {get; set;}",
            "",
            "        public double FRadInt {get; set;}",
            "        public double ET {get; set;}",
            "        public double ES {get; set;}",
            "        public double PET {get; set;}",
            "        public double LAI {get; set;}",
            "        public double Height {get; set;}",
            "        public double RootDepth {get; set;}",
            "        public double PlantWidth {get; set;}",
            "",
            "        [EventSubscribe(\"StartOfSimulation\")]",
            "        private void DoStartOfSimulation(object sender, EventArgs e)",
            "        {",
            "               ",
            "               ThisZone = this.Parent.Parent as RectangularZone;",
            "               RowZone = this.Parent.Parent.Parent.FindInScope(\"Row\") as RectangularZone;",
            "               AlleyZone = (RectangularZone)this.Parent.Parent.Parent.FindInScope(\"Alley\") as RectangularZone;",
            "               AreaWidth = AlleyZone.Width + RowZone.Width;",
            "               PlantWidth = 0;",
            "        }",
            "        ",
            "        [EventSubscribe(\"DoReportCalculations\")]",
            "        private void OnDoReportCalculations(object sender, EventArgs e)",
            "        {",
            "            if (ThisZone.Name == \"Row\")",
            "                {",
            "                FRadInt = ((double)RowZone.Get(\"Grapevine.Leaf.RadiationIntercepted\") * RowZone.Width)/(weather.Radn * AreaWidth);",
            "                ET = (double)RowZone.Get(\"Grapevine.Leaf.Transpiration\") * RowZone.Width/AreaWidth;",
            "                LAI = (double)RowZone.Get(\"Grapevine.Leaf.LAI\");",
            "                //LAIPerVine =  LAI*RowZone.Width*1.8;",
            "                //TreeInitialisation.Script.VineDistance;",
            "                //(double)RowZone.Get(\"Grapevine.Leaf.LAI\");",
            "                Height = (double)RowZone.Get(\"Grapevine.Leaf.Height\");",
            "                RootDepth = (double)RowZone.Get(\"Grapevine.Root.Depth\");",
            "                PlantWidth = (double)RowZone.Get(\"Grapevine.Leaf.Width\");",
            "                }",
            "            else",
            "                {",
            "                FRadInt = ((double)AlleyZone.Get(\"Slurp.Leaf.RadiationIntercepted\") * ThisZone.Width)/ (weather.Radn * AreaWidth);",
            "                ET = (double)AlleyZone.Get(\"Slurp.Leaf.Transpiration\") * ThisZone.Width/AreaWidth;",
            "                LAI = (double)AlleyZone.Get(\"Slurp.Leaf.LAI\");",
            "                Height = (double)AlleyZone.Get(\"Slurp.Leaf.Height\");",
            "                RootDepth = (double)AlleyZone.Get(\"Slurp.Root.Depth\");",
            "                }",
            "",
            "            ES = (double)ThisZone.Get(\"Soil.SoilWater.Es\") * ThisZone.Width/AreaWidth;",
            "            double PETWidth = Math.Min(Math.Max(PlantWidth,ThisZone.Width),AreaWidth);",
            "            PET = (double)ThisZone.Get(\"Soil.SoilWater.Eo\") * PETWidth/AreaWidth;",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [],
          "Name": "PlantVariables",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Interfaces;",
            "using System;",
            "using Models.Core;",
            "using System.Collections.Generic;",
            "using System.Text;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models;",
            "using System.Xml.Serialization;",
            "using APSIM.Shared.Utilities;",
            "",
            "namespace Models",
            "{",
            "    [Serializable] ",
            "    public class Script : Model",
            "    {",
            "        [Link] private Zone zone;",
            "        [Link] private Irrigation irrigation;",
            "        [Link] private Soil soil;",
            "        [Link] private Clock clock;",
            "        [Link]",
            "        private IPhysical soilPhysical;",
            "        [Link]",
            "        private ISoilWater waterBalance;",
            "        public double FASW { get; set; }",
            "        public double WaterDeficit  { get; set; } ",
            "        ",
            "        [Description(\"Irrigation start window (d-mmm)\")]",
            "        public string StartDate { get; set; }",
            "        [Description(\"Irrigation end window (d-mmm)\")]",
            "        public string EndDate { get; set; }",
            "",
            "        [Description(\"Threshold fraction available water (0-1)\")]",
            "        public double FASWThreshold { get; set; }",
            "",
            "        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]",
            "        public double FASWDepth { get; set; }",
            "",
            "        [Description(\"Amount of water (mm) applied each irrigation\")]",
            "        public double Amount { get; set; }",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            CalculateFASW();",
            "            if (DateUtilities.WithinDates(StartDate, clock.Today, EndDate))",
            "            {",
            "                if (FASW < FASWThreshold)",
            "                {",
            "                    irrigation.Apply(Amount, depth: 0);",
            "                }",
            "            }",
            "        }",
            "        ",
            "        private void CalculateFASW()",
            "        {",
            "            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);",
            "            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);",
            "        ",
            "            int nlayr = GetLayerIndex();",
            "            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);",
            "",
            "            double excess_fr = MathUtilities.Divide((cumdep - FASWDepth), soilPhysical.Thickness[nlayr], 0.0);",
            "",
            "            // note that results may be strange if swdep < ll15",
            "            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0)",
            "                              - excess_fr * waterBalance.SWmm[nlayr])",
            "                              - (MathUtilities.Sum(LL15, 0, nlayr, 0.0)",
            "                              - excess_fr * LL15[nlayr]);",
            "",
            "",
            "            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0)",
            "                                  - excess_fr * DUL[nlayr])",
            "                                  - (MathUtilities.Sum(LL15, 0, nlayr, 0.0)",
            "                                  - excess_fr * LL15[nlayr]);",
            "",
            "            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);",
            "            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);",
            "        }",
            "",
            "        private int GetLayerIndex()",
            "        {",
            "            double[] cumThickness = soilPhysical.ThicknessCumulative;",
            "            for (int i = 1; i < cumThickness.Length; i++)",
            "            {",
            "                if (FASWDepth < cumThickness[i])",
            "                    return i - 1;",
            "            }",
            "            ",
            "            return cumThickness.Length - 1;",
            "        }",
            "",
            "    }",
            "}",
            "       "
          ],
          "Parameters": [
            {
              "Key": "StartDate",
              "Value": "1-nov"
            },
            {
              "Key": "EndDate",
              "Value": "1-mar"
            },
            {
              "Key": "FASWThreshold",
              "Value": "0.8"
            },
            {
              "Key": "FASWDepth",
              "Value": "2000"
            },
            {
              "Key": "Amount",
              "Value": "20"
            }
          ],
          "Name": "AutoIrrigationBasedOnWaterDeficit",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using System;",
            "using Models.Core;",
            "using Models.PMF;",
            "using APSIM.Shared.Utilities;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] Clock Clock;",
            "        [Link] Fertiliser Fertiliser;",
            "        ",
            "        [Separator(\"A component to apply fertiliser on one or more dates on every year of the simulation\")]",
            "",
            "        [Description(\"Type of fertiliser to apply? \")] ",
            "        public Fertiliser.Types FertiliserType { get; set; }",
            "",
            "        [Description(\"Enter the fertilisation dates as dd-mmm with comma separation (any year information entered will be ignored): \")] ",
            "        public string[] FertiliserDates { get; set; } ",
            "",
            "        [Description(\"Amount of fertiliser to be applied (kg /ha)\")] ",
            "        public double Amount { get; set; }",
            "",
            "        [Description(\"Is the above amount to be applied each time? (yes/ticked)? Or is it the total annual amount across all dates (no/unticked)\")] ",
            "        public bool AmountType { get; set; }",
            "        ",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            foreach (string ddMMM in FertiliserDates)",
            "            {",
            "                if (DateUtilities.DatesEqual(ddMMM, Clock.Today))",
            "                {",
            "                    if (AmountType)",
            "                        Fertiliser.Apply(Amount: Amount, Type: FertiliserType);",
            "                    else",
            "                        Fertiliser.Apply(Amount: Amount / FertiliserDates.Length, Type: FertiliserType);",
            "                }",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "FertiliserType",
              "Value": "NH4NO3N"
            },
            {
              "Key": "FertiliserDates",
              "Value": "10-Nov, 10-Jan"
            },
            {
              "Key": "Amount",
              "Value": "30"
            },
            {
              "Key": "AmountType",
              "Value": "True"
            }
          ],
          "Name": "Fertilise on fixed dates",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
          "SurfOM": [],
          "Canopies": [],
          "InitialResidueName": "wheat_stubble",
          "InitialResidueType": "wheat",
          "InitialResidueMass": 0.0,
          "InitialStandingFraction": 0.0,
          "InitialCPR": 0.0,
          "InitialCNR": 30.0,
          "Name": "SurfaceOrganicMatter",
          "ResourceName": "SurfaceOrganicMatter",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using APSIM.Shared.Utilities;",
            "using Models.Surface;",
            "using Models.Utilities;",
            "using Models.Soils.Nutrients;",
            "using Models.Soils;",
            "using Models.PMF;",
            "using Models.Core;",
            "using System;",
            "using Models.Interfaces;",
            "",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] private Clock Clock;",
            "        [Link] private Plant Wheat;",
            "        [Link] private ISoilWater SoilWater;",
            "        [Link] private Nutrient nitrogen;",
            "        [Link] private SurfaceOrganicMatter SOM;",
            "        [Link] private Summary Summary;",
            "",
            "        [Description(\"Date to reset on:\")]",
            "        public string ResetDate {get;set;}",
            "",
            "        [Description(\"Reset Water? (Yes or No)\")]",
            "        public string ResetWater {get;set;}",
            "",
            "        [Description(\"Reset Soil Nutrients ? (Yes or No)\")]",
            "        public string ResetNutrients {get;set;}",
            "",
            "        [Description(\"Reset Surface Organic Matter? (Yes or No)\")]",
            "        public string ResetSOM {get;set;}",
            "",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            if (DateUtilities.WithinDates(ResetDate, Clock.Today, ResetDate))",
            "            {",
            "                if (ResetWater == \"Yes\")",
            "                {",
            "                    Summary.WriteMessage(this, \"Reset Water\", MessageType.Diagnostic);",
            "                    SoilWater.Reset();",
            "                }",
            "               ",
            "                 if (ResetNutrients == \"Yes\")",
            "                {",
            "                    Summary.WriteMessage(this, \"Reset Nitrogen\", MessageType.Diagnostic);",
            "                    nitrogen.Reset();",
            "                }",
            "",
            "                if (ResetSOM == \"Yes\")",
            "                {",
            "                    Summary.WriteMessage(this, \"Reset Surface OM\", MessageType.Diagnostic);",
            "                    SOM.Reset();",
            "                }",
            "            }",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "ResetDate",
              "Value": "10-Jul"
            },
            {
              "Key": "ResetWater",
              "Value": "Yes"
            },
            {
              "Key": "ResetNutrients",
              "Value": "Yes"
            },
            {
              "Key": "ResetSOM",
              "Value": "Yes"
            }
          ],
          "Name": "Reset on date",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "CodeArray": [
            "using Models.Soils;",
            "using Models.Soils.Nutrients;",
            "using System;",
            "using Models.Core;",
            "using Models.PMF;",
            "using Models.Soils.Nutrients;",
            "using APSIM.Shared.Utilities;",
            "namespace Models",
            "{",
            "    [Serializable]",
            "    public class Script : Model",
            "    {",
            "        [Link] private Clock Clock;",
            "        [Link] private Fertiliser Fertiliser;",
            "        [Link(Path=\"[NO3]\")] private Solute SoilNitrogenNO3;",
            "        [Link]",
            "        private Nutrient Nutrient;",
            "        [Link(Path=\"[SurfaceOrganicMatter].SurfaceResidue.Decomposition\")]",
            "        private OrganicFlow ResidueDecomposition;",
            "",
            "        [Description(\"Type of fertiliser to apply? \")] ",
            "        public Fertiliser.Types FertiliserType { get; set; }",
            "    ",
            "        [Description(\"Threshold amount of NO3 to topup to (kg/ha)\")]",
            "        public double Threshold { get; set;}",
            "        ",
            "        [EventSubscribe(\"DoManagement\")]",
            "        private void OnDoManagement(object sender, EventArgs e)",
            "        {",
            "            double Amount = Threshold - MathUtilities.Sum(SoilNitrogenNO3.kgha);",
            "            Fertiliser.Apply(Amount: Amount, Type: FertiliserType);",
            "        }",
            "    }",
            "}"
          ],
          "Parameters": [
            {
              "Key": "FertiliserType",
              "Value": "NH4NO3N"
            },
            {
              "Key": "Threshold",
              "Value": "50"
            }
          ],
          "Name": "Fertilise topup",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Vineyard",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "C:\\Users\\vagga\\Desktop\\test_apsim_GUI\\program\\APSIM2025.1.7644.0\\Examples\\WeatherFiles\\NZ_Seddon.met",
          "ExcelWorkSheetName": "",
          "Latitude": -41.63,
          "Tav": 12.76,
          "Amp": 15.19,
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Clock, Models",
          "Start": "2005-02-25T00:00:00",
          "End": "2006-02-01T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "Summary",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "Soil Arbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.MicroClimate, Models",
          "a_interception": 0.0,
          "b_interception": 1.0,
          "c_interception": 0.0,
          "d_interception": 0.0,
          "SoilHeatFluxFraction": 0.4,
          "MinimumHeightDiffForNewLayer": 0.0,
          "NightInterceptionFraction": 0.5,
          "ReferenceHeight": 2.0,
          "Name": "MicroClimate",
          "ResourceName": "MicroClimate",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Zones.RectangularZone, Models",
          "Length": 100.0,
          "Width": 0.9,
          "Slope": 0.0,
          "AspectAngle": 10.0,
          "Altitude": 50.0,
          "Name": "Row",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "Double GuyÃ´t-trained vines, pruned each year to retain 24 nodes were monitored. Vines were trained using vertical shoot positioning (VSP), with an exposed leaf area height of 1.2 m, and trimmed to maintain a compact canopy. Vines were planted 1.8 m apart within the row, and 2.4 m apart between rows. Average flowering date was determined by monitoring all the inflorescences on one cane on a vine in each plot on a regular basis throughout flowering. Likewise, regular berry samples (at least weekly) were taken from before the date of vÃ©raison until harvest at a soluble solids concentration value of 21.5 oBrix. ",
              "Name": "Memo",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "Grapevine",
              "ResourceName": "Grapevine",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 10.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 30.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": null,
              "ASCSubOrder": null,
              "SoilType": null,
              "LocalName": null,
              "Site": null,
              "NearestTown": null,
              "Region": null,
              "State": null,
              "Country": null,
              "NaturalVegetation": null,
              "ApsoilNumber": null,
              "Latitude": 0.0,
              "Longitude": 0.0,
              "LocationAccuracy": null,
              "YearOfSampling": null,
              "DataSource": null,
              "Comments": null,
              "Name": "Soil",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.LayerStructure, Models",
                  "Thickness": [
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    400.0,
                    400.0,
                    400.0,
                    600.0
                  ],
                  "Name": "LayerStructure",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    200.0,
                    250.0,
                    300.0,
                    150.0,
                    150.0,
                    1950.0
                  ],
                  "ParticleSizeSand": [
                    5.0,
                    5.0,
                    5.0,
                    5.0,
                    5.0,
                    5.0
                  ],
                  "ParticleSizeSilt": [
                    65.0,
                    65.0,
                    65.0,
                    65.0,
                    65.0,
                    65.0
                  ],
                  "ParticleSizeClay": [
                    30.0,
                    30.0,
                    30.0,
                    30.0,
                    30.0,
                    30.0
                  ],
                  "Rocks": [
                    0.0,
                    0.0,
                    0.0,
                    0.2021505376344087,
                    0.2021505376344087,
                    0.19354838709677413
                  ],
                  "Texture": null,
                  "BD": [
                    1.35,
                    1.35,
                    1.4,
                    1.4,
                    1.4,
                    1.59
                  ],
                  "AirDry": [
                    0.1,
                    0.1,
                    0.15,
                    0.13,
                    0.1,
                    0.06
                  ],
                  "LL15": [
                    0.2,
                    0.2,
                    0.15,
                    0.13,
                    0.1,
                    0.06
                  ],
                  "DUL": [
                    0.35,
                    0.35,
                    0.35,
                    0.33,
                    0.28,
                    0.1
                  ],
                  "SAT": [
                    0.45,
                    0.45,
                    0.4,
                    0.35,
                    0.35,
                    0.3
                  ],
                  "KS": null,
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": [
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated"
                  ],
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": [
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated"
                  ],
                  "ParticleSizeSiltMetadata": [
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated"
                  ],
                  "ParticleSizeClayMetadata": [
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated"
                  ],
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.2,
                        0.2,
                        0.15,
                        0.13,
                        0.1,
                        0.06
                      ],
                      "KL": [
                        0.25,
                        0.1,
                        0.08,
                        0.05,
                        0.05,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "KLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "XFMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "Name": "GrapevineSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.2,
                        0.2,
                        0.15,
                        0.13,
                        0.1,
                        0.06
                      ],
                      "KL": [
                        0.11,
                        0.11,
                        0.02,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "KLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "XFMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "Name": "SlurpSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 4.0,
                  "SummerCona": 1.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 4.0,
                  "WinterCona": 1.0,
                  "DiffusConst": 88.0,
                  "DiffusSlope": 35.4,
                  "Salb": 0.18,
                  "CN2Bare": 68.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": 0.0,
                  "CatchmentArea": 0.0,
                  "PSIDul": -100.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    100.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    400.0,
                    400.0
                  ],
                  "SWCON": [
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55
                  ],
                  "KLAT": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "Name": "SoilWater",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 30.0,
                  "Thickness": [
                    100.0,
                    200.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    1.82,
                    1.47,
                    1.2,
                    1.03,
                    0.47,
                    0.47
                  ],
                  "CarbonUnits": 0,
                  "SoilCNRatio": [
                    11.5,
                    11.5,
                    11.5,
                    11.5,
                    11.5,
                    11.5
                  ],
                  "FBiom": [
                    0.025,
                    0.025,
                    0.015,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.3,
                    0.4,
                    0.75,
                    0.9,
                    0.96,
                    0.96
                  ],
                  "FOM": [
                    1243.9310541346904,
                    833.8319214727269,
                    457.61666105087295,
                    251.1453484552152,
                    137.83148958311097,
                    75.64352530338392
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    100.0,
                    200.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "PH": [
                    7.0,
                    7.0,
                    7.0,
                    7.0,
                    7.0,
                    7.0
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    200.0,
                    250.0,
                    300.0,
                    150.0,
                    150.0,
                    1950.0
                  ],
                  "InitialValues": [
                    0.35,
                    0.35,
                    0.35,
                    0.33,
                    0.28,
                    0.1
                  ],
                  "InitialPAWmm": 262.5,
                  "RelativeTo": "LL15",
                  "FilledFromTop": true,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.OutputLayers, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    150.0,
                    150.0,
                    150.0,
                    150.0,
                    150.0
                  ],
                  "Name": "OutputLayers",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    100.0,
                    200.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    3.0,
                    2.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    100.0,
                    200.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    3.0,
                    1.5,
                    1.2,
                    1.1,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    100.0,
                    200.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Interfaces;",
                "using System;",
                "using System.Linq;",
                "using Models.Core;",
                "using System.Collections.Generic;",
                "using System.Text;",
                "using Models.Soils;",
                "using Models.PMF;",
                "using Models;",
                "using System.Xml.Serialization;",
                "using APSIM.Shared.Utilities;",
                "using Models.Interfaces;",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    public class Script : Model",
                "    {",
                "        [Link] private Zone zone;",
                "        [Link] private Irrigation irrigation;",
                "        [Link] private ISoilWater waterBalance;",
                "        [Link] private IPhysical soilPhysical;",
                "        public double FASW { get; set; }",
                "        public double WaterDeficit  { get; set; }",
                "    ",
                "",
                "",
                "        [Description(\"Crop to irrigate\")]",
                "        public IPlant Crop { get; set; }",
                "        ",
                "        [Description(\"Auto irrigation on?\")]",
                "        public bool AutoIrrigationOn { get; set; }",
                "",
                "        [Description(\"Threshold fraction available water (0-1)\")]",
                "        public double FASWThreshold { get; set; }",
                "",
                "        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]",
                "        public double FASWDepth { get; set; }",
                "",
                "        [Description(\"Minimum weeks between irrigations\")]",
                "        public double weeks { get; set; }",
                "",
                "        [Description(\"Minimum days after sowing for first irrigation\")]",
                "        public int afterSowing { get; set; }",
                "",
                "        private double irrigationGap = 0;    // gap between irrigations",
                "",
                "        /// <summary>Called at start of simulation. Performs some basic error checking. </summary>",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void ErrorChecking(object sender, EventArgs args)",
                "        {",
                "            if (Crop == null)",
                "                throw new Exception(\"No crop was specified in script \" + Parent.Name);",
                "        }",
                "",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            if (AutoIrrigationOn && Crop.IsAlive)",
                "            {",
                "                   irrigationGap += 1;                // increment gap between irrigations",
                "                CalculateFASW();                // calc FASW and WaterDeficit",
                "                if ((FASW < FASWThreshold) && (irrigationGap >= weeks * 7))",
                "                {",
                "                    irrigation.Apply(WaterDeficit, depth: 0);",
                "                    irrigationGap = 0;            // reset",
                "                }",
                "            }",
                "            else",
                "            {",
                "                irrigationGap = weeks * 7 - afterSowing - 1;    // allow irrigation a number of days after it becomes alive/sown",
                "            }",
                "        }",
                "",
                "        // Calculate the fraction of the potential available sw",
                "        // Calculate the deficit amount from DUL",
                "        private void CalculateFASW()",
                "        {",
                "            double[] LL15 = MathUtilities.Multiply(soilPhysical.LL15, soilPhysical.Thickness);",
                "            double[] DUL = MathUtilities.Multiply(soilPhysical.DUL, soilPhysical.Thickness);",
                "        ",
                "            int nlayr = GetLayerIndex(FASWDepth);",
                "            nlayr = Math.Min(nlayr, soilPhysical.Thickness.Length-1);",
                "            double cumdep = MathUtilities.Sum(soilPhysical.Thickness, 0, nlayr, 0.0);    // tricky function that sums up to before nlayr",
                "",
                "            double part_layer = MathUtilities.Divide((FASWDepth - cumdep), soilPhysical.Thickness[nlayr], 0.0);",
                "",
                "            // note that results may be strange if swdep < ll15",
                "            double avail_sw = (MathUtilities.Sum(waterBalance.SWmm, 0, nlayr, 0.0) + part_layer * waterBalance.SWmm[nlayr])",
                "                            - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);",
                "",
                "            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0) + part_layer * DUL[nlayr])",
                "                                - (MathUtilities.Sum(LL15, 0, nlayr, 0.0) + part_layer * LL15[nlayr]);",
                "            ",
                "            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);",
                "            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);",
                "        }",
                "",
                "        // Get index of the layer that has this depth in it ",
                "        private int GetLayerIndex(double pointDepth)",
                "        {",
                "            double[] cumThickness = soilPhysical.ThicknessCumulative;",
                "            int layerIdx = 0;",
                "            while ((layerIdx < cumThickness.Length) && (pointDepth > cumThickness[layerIdx]))",
                "            {",
                "                layerIdx += 1;",
                "            }",
                "",
                "            return layerIdx;",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "Crop",
                  "Value": "[Grapevine]"
                },
                {
                  "Key": "AutoIrrigationOn",
                  "Value": "True"
                },
                {
                  "Key": "FASWThreshold",
                  "Value": "0.9"
                },
                {
                  "Key": "FASWDepth",
                  "Value": "600"
                },
                {
                  "Key": "weeks",
                  "Value": "0"
                },
                {
                  "Key": "afterSowing",
                  "Value": "2"
                }
              ],
              "Name": "Automatic irrigation based on water deficit",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils;",
                "using Models.Functions;",
                "using APSIM.Shared.Utilities;",
                "using System.Xml.Serialization;",
                "using Models;",
                "using Models.PMF;",
                "using System.Text;",
                "using System.Collections.Generic;",
                "using Models.Core;",
                "using System;",
                "using Models.PMF.Organs;",
                "",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    public class Script : Model",
                "    {",
                "        [Link] private Plant Grapevine;",
                "        [Link] private Clock Clock;",
                "        [Link] private Zone zone;",
                "        [Link(Type = LinkType.Path, Path = \"[Grapevine].Root\")]",
                "        private Root root;",
                "",
                "        [Description(\"Use extra root zone\")]",
                "        public bool UseExtraZone { get; set; }",
                "",
                "        ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "            if (UseExtraZone)",
                "            {",
                "            root.ZoneNamesToGrowRootsIn.Add(\"Alley\");",
                "            root.ZoneRootDepths.Add(2600);",
                "            NutrientPoolFunctions InitialDM = new NutrientPoolFunctions();",
                "            Constant InitStruct = new Constant();",
                "            InitStruct.FixedValue = 10;",
                "            InitialDM.Structural = InitStruct;",
                "            Constant InitMetab = new Constant();",
                "            InitMetab.FixedValue = 0;",
                "            InitialDM.Metabolic = InitMetab;",
                "            Constant InitStor = new Constant();",
                "            InitStor.FixedValue = 0;",
                "            InitialDM.Storage = InitStor;",
                "            root.ZoneInitialDM.Add(InitialDM);",
                "",
                "            }",
                "        }",
                "    }",
                "}",
                "       ",
                ""
              ],
              "Parameters": [
                {
                  "Key": "UseExtraZone",
                  "Value": "True"
                }
              ],
              "Name": "SetupTreeRootZones",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Climate;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using System.Collections.Generic;",
                "using Models.Soils;",
                "using APSIM.Shared.Utilities;",
                "using Models.Zones;",
                "using Models.PMF.Organs;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] private Weather weather;",
                "        [Link(Type = LinkType.Path, Path = \"[Grapevine].Root\")]",
                "        private Root root;",
                "        private RectangularZone AlleyZone {get; set; }",
                "        private RectangularZone RowZone {get; set;}",
                "        private RectangularZone ThisZone {get; set;}",
                "        private double AreaWidth {get; set;}",
                "",
                "        public double FRadInt {get; set;}",
                "        public double ET {get; set;}",
                "        public double ES {get; set;}",
                "        public double PET {get; set;}",
                "        public double LAI {get; set;}",
                "        public double Height {get; set;}",
                "        public double RootDepth {get; set;}",
                "        public double PlantWidth {get; set;}",
                "",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void DoStartOfSimulation(object sender, EventArgs e)",
                "        {",
                "               ",
                "               ThisZone = this.Parent.Parent as RectangularZone;",
                "               RowZone = this.Parent.Parent.Parent.FindInScope(\"Row\") as RectangularZone;",
                "               AlleyZone = (RectangularZone)this.Parent.Parent.Parent.FindInScope(\"Alley\") as RectangularZone;",
                "               AreaWidth = AlleyZone.Width + RowZone.Width;",
                "               PlantWidth = 0;",
                "        }",
                "        ",
                "        [EventSubscribe(\"DoReportCalculations\")]",
                "        private void OnDoReportCalculations(object sender, EventArgs e)",
                "        {",
                "            if (ThisZone.Name == \"Row\")",
                "                {",
                "                FRadInt = ((double)RowZone.Get(\"Grapevine.Leaf.RadiationIntercepted\") * RowZone.Width)/(weather.Radn * AreaWidth);",
                "                ET = (double)RowZone.Get(\"Grapevine.Leaf.Transpiration\") * RowZone.Width/AreaWidth;",
                "                LAI = (double)RowZone.Get(\"Grapevine.Leaf.LAI\");",
                "                //LAIPerVine =  LAI*RowZone.Width*1.8;",
                "                //TreeInitialisation.Script.VineDistance;",
                "                //(double)RowZone.Get(\"Grapevine.Leaf.LAI\");",
                "                Height = (double)RowZone.Get(\"Grapevine.Leaf.Height\");",
                "                RootDepth = (double)RowZone.Get(\"Grapevine.Root.Depth\");",
                "                PlantWidth = (double)RowZone.Get(\"Grapevine.Leaf.Width\");",
                "                }",
                "            else",
                "                {",
                "                FRadInt = ((double)AlleyZone.Get(\"Slurp.Leaf.RadiationIntercepted\") * ThisZone.Width)/ (weather.Radn * AreaWidth);",
                "                ET = (double)AlleyZone.Get(\"Slurp.Leaf.Transpiration\") * ThisZone.Width/AreaWidth;",
                "                LAI = (double)AlleyZone.Get(\"Slurp.Leaf.LAI\");",
                "                Height = (double)AlleyZone.Get(\"Slurp.Leaf.Height\");",
                "                RootDepth = (double)AlleyZone.Get(\"Slurp.Root.Depth\");",
                "                }",
                "",
                "            ES = (double)ThisZone.Get(\"Soil.SoilWater.Es\") * ThisZone.Width/AreaWidth;",
                "            double PETWidth = Math.Min(Math.Max(PlantWidth,ThisZone.Width),AreaWidth);",
                "            PET = (double)ThisZone.Get(\"Soil.SoilWater.Eo\") * PETWidth/AreaWidth;",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [],
              "Name": "PlantVariables",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Climate;",
                "using System;",
                "using Models.Core;",
                "using System.Collections.Generic;",
                "using System.Text;",
                "using Models.Soils;",
                "using Models.PMF;",
                "using Models;",
                "using System.Xml.Serialization;",
                "using APSIM.Shared.Utilities;",
                "",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    public class Script : Model",
                "    {",
                "       [Link] Irrigation irrigation;",
                "       [Link] Clock Clock;",
                "       [Link] Fertiliser Fertiliser;",
                "       [Link] Summary Summary;",
                "       [Link] Weather weather;",
                "",
                "        [Description(\"Fertilize_DAWS\")]",
                "         public int FertilizeDAWS { get; set; }",
                "        [Description(\"Amount of fertiliser to be applied\")]",
                "        public double Amount { get; set; }",
                "",
                "       [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "          if (weather.DaysSinceWinterSolstice == FertilizeDAWS)",
                "           Fertiliser.Apply(Amount: Amount, Type: Fertiliser.Types.NO3N);",
                "        }",
                "",
                "",
                "       public void applyDripIrri(double amount)",
                "        {",
                "            double layerAmount = amount/4;",
                "            irrigation.Apply(layerAmount, 0);",
                "            irrigation.Apply(layerAmount*2, 220);",
                "            irrigation.Apply(layerAmount, 420);",
                "",
                "        }",
                "        public double totalIrrigation {get; set;}",
                "        [EventSubscribe(\"Irrigated\")]",
                "        private void OnIrrigated(object sender, ",
                "        IrrigationApplicationType irrigData)",
                "        {",
                "            totalIrrigation += irrigData.Amount;",
                "         }",
                "    }",
                "}",
                "       "
              ],
              "Parameters": [
                {
                  "Key": "FertilizeDAWS",
                  "Value": "100"
                },
                {
                  "Key": "Amount",
                  "Value": "67"
                }
              ],
              "Name": "DripIrrigator",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.PMF.Interfaces;",
                "using Newtonsoft.Json;",
                "using Models.PMF.Struct;",
                "using Models.Climate;",
                "using System;",
                "using System.Collections.Generic;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.PMF.Interfaces;",
                "using System.Xml.Serialization;",
                "using Models.PMF.Organs;",
                "using Models.PMF.Phen;",
                "using Models.Soils;",
                "",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                "    public class Script : Model",
                "    {",
                "        [Link] private Plant Grapevine;",
                "        [Link] private Clock Clock;",
                "        [Link] private Zone zone;",
                "        [Link] private Weather weather;",
                "        [Link]",
                "        private Root root;",
                "        [Link(Type = LinkType.Path, Path = \"[Grapevine].Structure\")]",
                "        private Structure structure;",
                "        [Link(Type = LinkType.Path, Path = \"[Grapevine].Phenology\")]",
                "        private Phenology phenology;",
                "       ",
                "           public event EventHandler LeafPlucking;",
                "           public event EventHandler Pruning;",
                "       ",
                "        [Description(\"SummerPruning_DAWS\")]         ",
                "        public int LeafPluckingDAWS { get; set; }  //day",
                "",
                "        [Description(\"Harvest_DAWS\")]",
                "        public int HarvestDAWS { get; set; }",
                "",
                "        [Description(\"Pruning_DAWS\")]         ",
                "        public int PruningDAWS { get; set; }  //day",
                "",
                "        [Description(\"Frost Date 1\")]",
                "        public DateTime FrostDate1 { get; set; }",
                "        [Description(\"Frost Date 2\")]",
                "        public DateTime FrostDate2 { get; set; }",
                "",
                "",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "        }",
                "        ",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "             var Leaf = Grapevine.FindChild<IHasDamageableBiomass>(\"Leaf\");",
                "             var Shoot = Grapevine.FindChild<IHasDamageableBiomass>(\"Shoot\");",
                "             var Cane = Grapevine.FindChild<IHasDamageableBiomass>(\"Cane\");",
                "             var Trunk = Grapevine.FindChild<IHasDamageableBiomass>(\"Trunk\");",
                "             var Root = Grapevine.FindChild<IHasDamageableBiomass>(\"Root\");",
                "             var StructuralRoot = Grapevine.FindChild<IHasDamageableBiomass>(\"StructuralRoot\");",
                "             var Berry = Grapevine.FindChild<IHasDamageableBiomass>(\"Berry\");",
                "             ",
                "             //Set up  array of remove fractions to send with Cut method.  Each member in the array corresponds to an organ in the same order they are set up in.",
                "             //PruneDate = DateTime.Parse(PruneDateString);",
                "             if (weather.DaysSinceWinterSolstice == LeafPluckingDAWS && phenology.Stage >= 3)",
                "             {",
                "                    ",
                "                //int LeafTipsAppeared = (int)structure.LeafTipsAppeared;",
                "                //int NodesToRemove = (int)Math.Max(LeafTipsAppeared - TargetLeafRank, 1); ",
                "                double FractionToRemove = 0.3; //1- TargetLeafRank/LeafTipsAppeared;",
                "            ",
                "               // Remove_1.NodesToRemove = NodesToRemove;",
                "                LeafPlucking?.Invoke(this, EventArgs.Empty);",
                "                Leaf.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: FractionToRemove, deadToResidue: 0.0);",
                "                Shoot.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: FractionToRemove, deadToResidue: 0.0);",
                "                Cane.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "                Trunk.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "                Root.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "                StructuralRoot.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0.0, deadToResidue: 0.0);",
                "                Berry.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "                ",
                "             }",
                "",
                "           if (weather.DaysSinceWinterSolstice == HarvestDAWS && phenology.Stage >= 3)",
                "           {",
                "               LeafPlucking?.Invoke(this, EventArgs.Empty);",
                "               Leaf.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0.2, deadToResidue: 0.0);",
                "               Shoot.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "               Cane.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "               Trunk.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "               Root.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "               StructuralRoot.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0.0, deadToResidue: 0.0);",
                "               Berry.RemoveBiomass(liveToRemove: 1, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "           }",
                "                                   ",
                "           if (weather.DaysSinceWinterSolstice == PruningDAWS&& phenology.Stage >= 3)",
                "           {",
                "               Grapevine.Phenology?.SetToStage(1);",
                "               Pruning?.Invoke(this, EventArgs.Empty);",
                "               Leaf.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 1.0, deadToResidue: 0.0);",
                "               Shoot.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 1.0, deadToResidue: 0.0);",
                "               Cane.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 1.0, deadToResidue: 0.0);",
                "               Trunk.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "               Root.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0, deadToResidue: 0.0);",
                "               StructuralRoot.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0.0, deadToResidue: 0.0);",
                "               Berry.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 1.0, deadToResidue: 0.0);",
                "",
                "               double caneBiomass = 96.9; //g/m2 reset the cane biomass to the original value ",
                "               double caneNSC = caneBiomass * 0.18;",
                "",
                "               zone.Set(\"[Grapevine].Cane.Live.StorageWt\", caneNSC);                ",
                "               zone.Set(\"[Grapevine].Cane.Live.StructuralWt\", caneBiomass - caneNSC); ",
                "",
                "                //zone.Set(\"[Grapevine].Trunk.Live.StructuralWt\", 280);     ",
                "               // zone.Set(\"[Grapevine].Trunk.Live.StorageWt\", 70);     ",
                "",
                "               // zone.Set(\"[Grapevine].Root.Live.StructuralWt\", 1531);     ",
                "               // zone.Set(\"[Grapevine].Root.Live.StorageWt\",  349);     ",
                "",
                "            }",
                "           if (Clock.Today.Date == FrostDate1)      ",
                "           {",
                "              LeafPlucking?.Invoke(this, EventArgs.Empty);",
                "              Leaf.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0.2, deadToResidue: 0.0);",
                "              zone.Set(\"[Grapevine].Structure.FinalLeafNumber.FixedValue\", 28); ",
                "           }  ",
                "",
                "           if (Clock.Today.Date == FrostDate2)      ",
                "           {",
                "              LeafPlucking?.Invoke(this, EventArgs.Empty);",
                "              Leaf.RemoveBiomass(liveToRemove: 0, deadToRemove: 0.0, liveToResidue: 0.2, deadToResidue: 0.0);",
                "           }  ",
                "",
                "        }",
                "    }",
                "}",
                "            ",
                "                "
              ],
              "Parameters": [
                {
                  "Key": "LeafPluckingDAWS",
                  "Value": "205"
                },
                {
                  "Key": "HarvestDAWS",
                  "Value": "290"
                },
                {
                  "Key": "PruningDAWS",
                  "Value": "314"
                },
                {
                  "Key": "FrostDate1",
                  "Value": "10/03/2002 00:00:00"
                },
                {
                  "Key": "FrostDate2",
                  "Value": "11/18/2002 00:00:00"
                }
              ],
              "Name": "HarvestNPruning",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using APSIM.Shared.Utilities;",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Clock Clock;",
                "        [Link] Fertiliser Fertiliser;",
                "        ",
                "        [Separator(\"A component to apply fertiliser on one or more dates on every year of the simulation\")]",
                "",
                "        [Description(\"Type of fertiliser to apply? \")] ",
                "        public Fertiliser.Types FertiliserType { get; set; }",
                "",
                "        [Description(\"Enter the fertilisation dates as dd-mmm with comma separation (any year information entered will be ignored): \")] ",
                "        public string[] FertiliserDates { get; set; } ",
                "",
                "        [Description(\"Amount of fertiliser to be applied (kg /ha)\")] ",
                "        public double Amount { get; set; }",
                "",
                "        [Description(\"Is the above amount to be applied each time? (yes/ticked)? Or is it the total annual amount across all dates (no/unticked)\")] ",
                "        public bool AmountType { get; set; }",
                "        ",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            foreach (string ddMMM in FertiliserDates)",
                "            {",
                "                if (DateUtilities.DatesEqual(ddMMM, Clock.Today))",
                "                {",
                "                    if (AmountType)",
                "                        Fertiliser.Apply(Amount: Amount, Type: FertiliserType);",
                "                    else",
                "                        Fertiliser.Apply(Amount: Amount / FertiliserDates.Length, Type: FertiliserType);",
                "                }",
                "            }",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "FertiliserType",
                  "Value": "NH4NO3N"
                },
                {
                  "Key": "FertiliserDates",
                  "Value": "1-Nov, 1-Feb"
                },
                {
                  "Key": "Amount",
                  "Value": "15"
                },
                {
                  "Key": "AmountType",
                  "Value": "True"
                }
              ],
              "Name": "Fertilise on fixed dates",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using APSIM.Shared.Utilities;",
                "using Models.Surface;",
                "using Models.Utilities;",
                "using Models.Soils.Nutrients;",
                "using Models.Soils;",
                "using Models.PMF;",
                "using Models.Core;",
                "using System;",
                "using Models.Interfaces;",
                "using System.Diagnostics;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] private Clock Clock;",
                "        [Link] private Plant Wheat;",
                "        [Link] private ISoilWater SoilWater;",
                "        [Link] private Nutrient nitrogen;",
                "        [Link] private SurfaceOrganicMatter SOM;",
                "        [Link] private Summary Summary;",
                "",
                "        [Description(\"Date to reset on:\")]",
                "        public string ResetDate {get;set;}",
                "",
                "        [Description(\"Reset Water? (Yes or No)\")]",
                "        public string ResetWater {get;set;}",
                "",
                "        [Description(\"Reset Soil Nutrients ? (Yes or No)\")]",
                "        public string ResetNutrients {get;set;}",
                "",
                "        [Description(\"Reset Surface Organic Matter? (Yes or No)\")]",
                "        public string ResetSOM {get;set;}",
                "",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            Debugger.Break();",
                "            if (DateUtilities.WithinDates(ResetDate, Clock.Today, ResetDate))",
                "            {",
                "                if (ResetWater == \"Yes\")",
                "                {",
                "                    Summary.WriteMessage(this, \"Reset Water\", MessageType.Diagnostic);",
                "                    SoilWater.Reset();",
                "                }",
                "               ",
                "                 if (ResetNutrients == \"Yes\")",
                "                {",
                "                    Summary.WriteMessage(this, \"Reset Nitrogen\", MessageType.Diagnostic);",
                "                    nitrogen.Reset();",
                "                }",
                "",
                "                if (ResetSOM == \"Yes\")",
                "                {",
                "                    Summary.WriteMessage(this, \"Reset Surface OM\", MessageType.Diagnostic);",
                "                    SOM.Reset();",
                "                }",
                "            }",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "ResetDate",
                  "Value": "10-Jul"
                },
                {
                  "Key": "ResetWater",
                  "Value": "Yes"
                },
                {
                  "Key": "ResetNutrients",
                  "Value": "Yes"
                },
                {
                  "Key": "ResetSOM",
                  "Value": "Yes"
                }
              ],
              "Name": "Reset on date",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Clock].Today.Year",
                "[Clock].Today.DayOfYear",
                "[Weather].DaysSinceWinterSolstice   as DAWS",
                "[PlantVariables].Script.Height \t\tas height",
                "[PlantVariables].Script.LAI         as lai",
                "[PlantVariables].Script.FRadInt     as f.rad.int",
                "[PlantVariables].Script.ET          as transpiration",
                "[PlantVariables].Script.ES          as Es",
                "[PlantVariables].Script.PET         as PET",
                "[PlantVariables].Script.RootDepth   as rootDepth",
                "",
                "[Soil].OutputLayers.SW",
                "sum([Soil].OutputLayers.SWmm)       as psw",
                "[Weather].Rain",
                "[Irrigation].IrrigationApplied",
                "[Soil].SoilWater.Drainage",
                "",
                "[Grapevine].Phenology.CurrentSeason as CurrentSeason",
                "[Grapevine].Phenology.Stage",
                "[Grapevine].Phenology.AccumulatedEmergedTT",
                "[Grapevine].Phenology.BudBurstDOY      as BudBurstDAWS",
                "[Grapevine].Phenology.FloweringDOY     as FloweringDAWS",
                "[Grapevine].Phenology.VeraisonDOY      as VeraisonDAWS",
                "[Grapevine].Phenology.CurrentStageName as CurrentStageName",
                "[Grapevine].Phenology.AccumulatedChillingUnitBeforeWinterPruning",
                "",
                "[Grapevine].Structure.PrimaryBudNo",
                "[Grapevine].Structure.MainStemPopn",
                "[Grapevine].Structure.LeafTipsAppeared",
                "",
                "[Grapevine].Structure.TotalLeavesPerShoot as leaf.no.shoot",
                "[Grapevine].Leaf.InitialisedCohortNo",
                "[Grapevine].Leaf.DeadCohortNo",
                "[Grapevine].Leaf.AppearedCohortNo",
                "[Grapevine].Leaf.CohortSize",
                "",
                "[Grapevine].Leaf.LAI as LAI",
                "[Grapevine].Leaf.LAI/([Grapevine].Population + 0.0000001)            as leaf.area.vine",
                "[Grapevine].Leaf.LAI/([Grapevine].Structure.MainStemPopn + 0.0000001) as leaf.area.shoot",
                "[Grapevine].Leaf.LAIMainStem/([Grapevine].Structure.MainStemPopn + 0.0000001) as leaf.area.shoot.main",
                "[Grapevine].Leaf.LAIBranch/([Grapevine].Structure.MainStemPopn + 0.0000001) as leaf.area.shoot.lateral",
                "",
                "",
                "[Grapevine].Leaf.Fn",
                "[Grapevine].Leaf.Fw",
                "[Grapevine].Leaf.Live.Wt",
                "[Grapevine].Leaf.Live.Wt/([Grapevine].Structure.MainStemPopn + 0.0000001) as leaf.dw.shoot",
                "",
                "[Grapevine].Shoot.Live.Wt",
                "[Grapevine].Shoot.Live.Wt/([Grapevine].Structure.MainStemPopn + 0.0000001) as shoot.dw",
                "[Grapevine].Shoot.Live.StructuralWt",
                "[Grapevine].Shoot.Live.StorageWt",
                "",
                "[Grapevine].Cane.Live.Wt",
                "[Grapevine].Cane.Live.StructuralWt",
                "[Grapevine].Cane.Live.StorageWt",
                "[Grapevine].Trunk.Live.Wt",
                "[Grapevine].Trunk.Live.StructuralWt",
                "[Grapevine].Trunk.Live.StorageWt",
                "[Grapevine].Trunk.Live.StorageWt/([Grapevine].Trunk.Live.Wt + 0.0000001) as total.NSC.concentration.trunk",
                "[Grapevine].Root.Live.Wt",
                "[Grapevine].StructuralRoot.Live.Wt",
                "[Grapevine].StructuralRoot.Live.StructuralWt",
                "[Grapevine].StructuralRoot.Live.StorageWt",
                "[Grapevine].StructuralRoot.Live.StorageWt/([Grapevine].StructuralRoot.Live.Wt + 0.0000001) as total.NSC.concentration.root",
                " ",
                "",
                "[Grapevine].Arbitrator.FDM",
                "[Grapevine].Arbitrator.DM.TotalFixationSupply",
                "",
                "[Grapevine].Berry.Live.Wt",
                "[Grapevine].Berry.SingleBerryDW",
                "[Grapevine].Berry.SingleBerryFW     as berry.fw.mean",
                "[Grapevine].Berry.TotalBerryFW  ",
                "[Grapevine].Berry.NumberFunction",
                "[Grapevine].Berry.ThermalTimeAfterFlowering",
                "[Grapevine].Berry.WaterContent",
                "[Grapevine].Berry.Brix \t\t\t\tas brix",
                "[Grapevine].Berry.TitratableAcid \tas ta",
                "",
                "[Grapevine].Berry.MetFactors.BUN_TmaxIni_Record    as BUN_TmaxIni",
                "[Grapevine].Berry.MetFactors.BUN_RadIni_Record     as BUN_RadIni",
                "[Grapevine].Berry.MetFactors.BEN_RainTotFlow as BEN_RainTotFlow",
                "[Grapevine].Berry.MetFactors.BEN_TmaxIni_Record    as BEN_TmaxIni_Record",
                "[Grapevine].Berry.MetFactors.BEN_TmeanFlow   as BEN_TmeanFlow",
                "[Grapevine].Berry.MetFactors.BM_RadFlow      as BM_RadFlow",
                "[Grapevine].Berry.MetFactors.BM_RainTotFlow  as BM_RainTotFlow",
                "[Grapevine].Berry.MetFactors.BM_RainTotVer   as BM_RainTotVer",
                "[Grapevine].Berry.MetFactors.BM_TmeanFlow    as BM_TmeanFlow",
                "",
                "[Grapevine].Berry.YieldComponent.BunchesPerShoot as bunch.no.shoot",
                "[Grapevine].Berry.YieldComponent.BunchesPerVine  as bunch.no.vine",
                "[Grapevine].Berry.YieldComponent.BerryNum    as BerryNum",
                "[Grapevine].Berry.YieldComponent.BerryMass   as berry.fw.est",
                "[Grapevine].Berry.YieldPerVine               as yield.per.vine"
              ],
              "EventNames": [
                "[Clock].DoReport"
              ],
              "GroupByVariableName": null,
              "Name": "Report",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.PMF.Phen;",
                "using Models.Zones;",
                "using Models.Soils;",
                "using APSIM.Shared.Utilities;",
                "using Models.PMF;",
                "using Models.Core;",
                "using System;",
                "using Models.PMF.Struct;",
                "        ",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                "    public class Script : Model",
                "    {",
                "        [Link] private Plant Grapevine;",
                "        [Link] private Clock Clock;",
                "        [Link] private Soil Soil;",
                "        [Link] private Zone zone;",
                "        [Link]",
                "        private Structure structure;",
                "        [Link]",
                "        private Phenology phenology;",
                "",
                "        [Display(Type = DisplayType.CultivarName)]",
                "        [Description(\"Plant Type\")]",
                "        public string CultivarName { get; set; }",
                "",
                "        [Description(\"Initialisation Date\")]",
                "        public DateTime SowingDate { get; set; }",
                "",
                "        [Description(\"Vine distance(m)\")]",
                "        public double VineDistance { get; set; }",
                "        //number of buds lay down in cane and spur. there is a function inside to calculate the number of buds per vine based on bud burst and from cane head",
                "        [Description(\"Bud number(#)\")]",
                "        public double BudNumber { get; set; }",
                "        //cane or spur biomass",
                "        [Description(\"Cane number(#)\")]",
                "        public double CaneNumber { get; set; }",
                "      ",
                "        [Description(\"Cane diameter(mm)\")]",
                "        public double CaneDiameter { get; set; }",
                "",
                "        [Description(\"Cane length(m)\")]",
                "        public double CaneLength { get; set; }",
                "        //trunk information",
                "        [Description(\"Trunk diameter(mm)\")]",
                "        public double TrunkDiameter { get; set; }",
                "",
                "        [Description(\"Trunk length(m)\")]",
                "        public double TrunkLength { get; set; }",
                "        //root dry matter",
                "        [Description(\"Fibrous root trunk ratio\")]",
                "        public double RootTrunkRatio { get; set; }",
                "             ",
                "        //total nonstructural fraction in dry matter ",
                "        [Description(\"Fibrous root nonstructural carbon fraction\")]",
                "        public double RootNSC { get; set; }",
                "",
                "        [Description(\"Trunk nonstructural carbon fraction\")]",
                "        public double TrunkNSC { get; set; }",
                "",
                "        [Description(\"Cane nonstructural carbon fraction\")]",
                "        public double CaneNSC { get; set; }",
                "",
                "        [Description(\"Age of trees (in Years) at start of simulation)\")]",
                "        public int StartAge {get;set;}",
                "",
                "        private RectangularZone RowZone {get; set;}",
                "",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            if (Clock.Today.Date == SowingDate)",
                "            {",
                "                RowZone = this.Parent.Parent.Parent.FindInScope(\"Row\") as RectangularZone;",
                "                double pop = 1/RowZone.Width/VineDistance;  ",
                "                //sowing method",
                "                Grapevine.Sow(cultivar: CultivarName,population: pop, ",
                "                depth: 2000, rowSpacing: RowZone.Width, budNumber:BudNumber);",
                "                double budsPerMeterRow = BudNumber/VineDistance; ",
                "                zone.Set(\"[Grapevine].Structure.BudsPerMeterRow.FixedValue\", budsPerMeterRow); ",
                "                //cane biomass",
                "                //calculate the biomass by length 1 meter time number of canes time wood density (0.5 g/mm2/m) * pop to covert the biomass into g/m2",
                "                double woodDensity = 0.4; //g/mm2/m",
                "                double CaneNumber = BudNumber/12; //recalculating cane number as we ",
                "                double caneBiomass = 3.1415926*(CaneDiameter/2)*(CaneDiameter/2)*CaneLength*CaneNumber *woodDensity * pop; ",
                "                double caneNSC = caneBiomass * CaneNSC;",
                "                zone.Set(\"[Grapevine].Cane.CaneDiameter.FixedValue\", CaneDiameter);",
                "                zone.Set(\"[Grapevine].Cane.CaneLength.FixedValue\", CaneLength);",
                "                zone.Set(\"[Grapevine].Cane.CaneNumber.FixedValue\", CaneNumber);",
                "",
                "                zone.Set(\"[Grapevine].Cane.Live.StorageWt\", caneNSC);                ",
                "                zone.Set(\"[Grapevine].Cane.Live.StructuralWt\", caneBiomass - caneNSC);                ",
                "",
                "                //trunk biomass",
                "                double trunkDensity = 0.5; //g/mm2/m",
                "                double trunkBiomass = 3.1415926*(TrunkDiameter/2)*(TrunkDiameter/2)*TrunkLength *trunkDensity * pop; ",
                "                double trunkNSC = trunkBiomass * TrunkNSC;",
                "",
                "                zone.Set(\"[Grapevine].Trunk.TrunkDiameter.FixedValue\", TrunkDiameter);",
                "                zone.Set(\"[Grapevine].Trunk.TrunkLength.FixedValue\", TrunkLength);",
                "",
                "                zone.Set(\"[Grapevine].Trunk.Live.StorageWt\", trunkNSC); ",
                "                zone.Set(\"[Grapevine].Trunk.Live.StructuralWt\", trunkBiomass - trunkNSC);              ",
                "                ",
                "",
                "                //Fibrous Root biomass is  per plant",
                "                double rootBiomass = RootTrunkRatio * trunkBiomass; ",
                "                double rootNSC = rootBiomass * RootNSC; ",
                "                // zone.Set(\"[Grapevine].StructuralRoot.DMDemands.Structural.RootTrunkRatio\",  RootTrunkRatio); ",
                "                ",
                "                 zone.Set(\"[Grapevine].StructuralRoot.Live.StorageWt\",    rootNSC ); //rootNSC*pop",
                "                 zone.Set(\"[Grapevine].StructuralRoot.Live.StructuralWt\", rootBiomass - rootNSC); ",
                "",
                "                object StartAgeValue = StartAge;",
                "                zone.Set(\"[Grapevine].Phenology.Age.Years\",StartAgeValue);",
                "",
                "",
                "            }",
                "        }",
                "    }",
                "}            "
              ],
              "Parameters": [
                {
                  "Key": "CultivarName",
                  "Value": "PinotGris"
                },
                {
                  "Key": "SowingDate",
                  "Value": "02/25/2005 00:00:00"
                },
                {
                  "Key": "VineDistance",
                  "Value": "1.8"
                },
                {
                  "Key": "BudNumber",
                  "Value": "48"
                },
                {
                  "Key": "CaneNumber",
                  "Value": "4"
                },
                {
                  "Key": "CaneDiameter",
                  "Value": "10"
                },
                {
                  "Key": "CaneLength",
                  "Value": "0.9"
                },
                {
                  "Key": "TrunkDiameter",
                  "Value": "40"
                },
                {
                  "Key": "TrunkLength",
                  "Value": "0.8"
                },
                {
                  "Key": "RootTrunkRatio",
                  "Value": "1"
                },
                {
                  "Key": "RootNSC",
                  "Value": "0.2"
                },
                {
                  "Key": "TrunkNSC",
                  "Value": "0.2"
                },
                {
                  "Key": "CaneNSC",
                  "Value": "0.2"
                },
                {
                  "Key": "StartAge",
                  "Value": "0"
                }
              ],
              "Name": "TreeInitialisation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "LabelOnOneLine": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "LabelOnOneLine": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Graph",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 0,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "Report",
                  "XFieldName": "Clock.Today",
                  "YFieldName": "rootDepth",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "LabelOnOneLine": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "LabelOnOneLine": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Graph1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 0,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 0,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "Report",
                  "XFieldName": "Clock.Today",
                  "YFieldName": "waterApplied",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Zones.RectangularZone, Models",
          "Length": 100.0,
          "Width": 1.5,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Alley",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Clock].Today.Year",
                "[Clock].Today.DayOfYear",
                "[Weather].DaysSinceWinterSolstice   as DAWS",
                "[PlantVariables].Script.Height \t\tas height",
                "[PlantVariables].Script.LAI         as lai",
                "[PlantVariables].Script.FRadInt     as f.rad.int",
                "[PlantVariables].Script.ET          as transpiration",
                "[PlantVariables].Script.ES          as Es",
                "[PlantVariables].Script.PET         as PET",
                "[PlantVariables].Script.RootDepth   as rootDepth",
                "",
                "[Soil].OutputLayers.SW",
                "sum([Soil].OutputLayers.SWmm)       as psw",
                "[Weather].Rain",
                "[Irrigation].IrrigationApplied",
                "[Soil].SoilWater.Drainage"
              ],
              "EventNames": [
                "[Clock].DoReport"
              ],
              "GroupByVariableName": null,
              "Name": "ReportAlley",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 10.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 30.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "Name": "Slurp",
              "ResourceName": "Slurp",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "ResourceName": "Fertiliser",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "",
                "using Models.Interfaces;",
                "using Models.PMF.Organs;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using APSIM.Shared.Utilities;",
                "using Models.Soils;",
                "        ",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    [System.Xml.Serialization.XmlInclude(typeof(Model))]",
                "    public class Script : Model",
                "    {",
                "        [Link] private Plant Slurp;",
                "        [Link] private Clock Clock;",
                "        [Link] private Soil Soil;",
                "        [Link] private Zone zone;",
                "        [Link(Type = LinkType.Path, Path = \"[Slurp].Root\")]",
                "        private Root root;",
                "        [Link]",
                "        private IPhysical soilPhysical;",
                "",
                "        [Display(Type = DisplayType.CultivarName)]",
                "        [Description(\"Plant Type\")]",
                "        public string CultivarName { get; set; }",
                "        [Description(\"Initial Root Depth\")]",
                "        public double InitialRootDepth { get; set; }",
                "        [Description(\"Initialisation Date\")]",
                "        public DateTime SowingDate { get; set; }",
                "        [Description(\"Maximum Root Depth\")]",
                "        public double RootDepth { get; set; }",
                "        [Description(\"Roof Front Velocity\")]",
                "        public double RFV { get; set; }",
                "        [Description(\"Factor to change Kl modifier with Depth\")]",
                "        public double KLReductionFactor { get; set; }",
                "        [Description(\"Depth that KL starts to decline\")]",
                "        public double KLReductionDepth { get; set; }",
                "        ",
                "        public double[] YKLModifiers { get; set; }",
                "        public double[] XDepth { get; set; }",
                "        private double Depth { get; set; }",
                "        ",
                "        [Description(\"Maximum Stomatal Conductance\")]",
                "        public double MaxG { get; set; }",
                "        [Description(\"Stomatal Radn response\")]",
                "        public double R50 { get; set; }",
                "        ",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            if (Clock.Today.Date == SowingDate)",
                "            {",
                "                Slurp.Sow(cultivar: CultivarName, population: 1, depth: InitialRootDepth, rowSpacing: 150);",
                "                ",
                "                YKLModifiers = new double[soilPhysical.Thickness.Length];",
                "                XDepth = new double[soilPhysical.Thickness.Length];",
                "                Depth = 0;",
                "                for (int layer = 0; layer < soilPhysical.Thickness.Length; layer++)",
                "                {",
                "                    Depth += soilPhysical.Thickness[layer] / 2;  //Add half of the thickness of the current layer so depth is the mid depth of that layer",
                "                    if (Depth <= KLReductionDepth)",
                "                    {",
                "                        YKLModifiers[layer] = 1;",
                "                        XDepth[layer] = Depth;",
                "                    }",
                "                    else",
                "                    {",
                "                        double KLMod = 1 * Math.Exp(-KLReductionFactor * (Depth - KLReductionDepth));",
                "                        YKLModifiers[layer] = KLMod;",
                "                        XDepth[layer] = Depth;",
                "                    }",
                "                    Depth += soilPhysical.Thickness[layer] / 2;  //Add the other half of the current layer so depth is the top of the next layer",
                "                }",
                "                object KLMods = YKLModifiers;",
                "                zone.Set(\"Slurp.Root.KLModifier.XYPairs.Y\", KLMods);",
                "                object Depths = XDepth;",
                "                zone.Set(\"Slurp.Root.KLModifier.XYPairs.X\", Depths);",
                "                object RD = RootDepth;",
                "                zone.Set(\"Slurp.Root.MaximumRootDepth.FixedValue\", RD);",
                "                object RV = RFV;",
                "                zone.Set(\"Slurp.Root.RootFrontVelocity.Potential.FixedValue\", RV);",
                "                object GMaxValue = MaxG;",
                "                zone.Set(\"Slurp.Leaf.Gsmax350\", GMaxValue); ",
                "                object R50Value = R50; ",
                "                zone.Set(\"Slurp.Leaf.R50\", R50Value); ",
                "                ",
                "            }",
                "        }",
                "    }",
                "}",
                "                "
              ],
              "Parameters": [
                {
                  "Key": "CultivarName",
                  "Value": "StaticCrop"
                },
                {
                  "Key": "InitialRootDepth",
                  "Value": "2000"
                },
                {
                  "Key": "SowingDate",
                  "Value": "02/25/2005 00:00:00"
                },
                {
                  "Key": "RootDepth",
                  "Value": "2000"
                },
                {
                  "Key": "RFV",
                  "Value": "10"
                },
                {
                  "Key": "KLReductionFactor",
                  "Value": "-0.001"
                },
                {
                  "Key": "KLReductionDepth",
                  "Value": "150"
                },
                {
                  "Key": "MaxG",
                  "Value": "0.004"
                },
                {
                  "Key": "R50",
                  "Value": "150"
                }
              ],
              "Name": "PastureInitialisation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils;",
                "using System.Data;",
                "using APSIM.Shared.Utilities;",
                "using System.Xml.Serialization;",
                "using Models;",
                "using Models.PMF;",
                "using System.Text;",
                "using System.Collections.Generic;",
                "using Models.Core;",
                "using System;",
                "using Models.Climate;",
                "",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    //[System.Xml.Serialization.XmlInclude(typeof(Model))]",
                "    public class Script : Model",
                "    {",
                "        [Link] Plant Slurp;",
                "        [Link] Clock Clock;",
                "        [Link] Zone zone;",
                "        [Link] Weather weather;",
                "",
                "        ",
                "        [Description(\"Extinction coefficient\")]",
                "        public  double Ext_coef { get; set; }",
                "        [Description(\"Maximum height of leaves\")]",
                "        public double MaximumHeight { get; set; }",
                "        [Description(\"Minimum height of leaves\")]",
                "        public double MinimumHeight { get; set; }",
                "        ",
                "        public double Cover {get; private set;}",
                "        public double LAI { get; private set; }",
                "                ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnStartOfSimulation(object sender, EventArgs e)",
                "        {",
                "            Cover = 0.5;",
                "        }",
                "        ",
                "        [EventSubscribe(\"StartOfDay\")]",
                "        private void OnStartOfDay(object sender, EventArgs e)",
                "        {",
                "            Cover += weather.MeanT * 0.001;",
                "",
                "            if (Cover >= 1.0)",
                "            {",
                "                Cover = 0.5;        ",
                "            }",
                "",
                "              LAI = Math.Log(1 - Cover) / -Ext_coef;",
                "",
                "            object LAIResetValue = LAI;",
                "            zone.Set(\"Slurp.Leaf.Area.FixedValue\", LAIResetValue);  ",
                "            object HeightResetValue = MinimumHeight + Cover * (MaximumHeight-MinimumHeight);",
                "            zone.Set(\"Slurp.Leaf.HeightFunction.FixedValue\", HeightResetValue);  ",
                "        }",
                "    }",
                "}",
                "                "
              ],
              "Parameters": [
                {
                  "Key": "Ext_coef",
                  "Value": "0.6"
                },
                {
                  "Key": "MaximumHeight",
                  "Value": "300"
                },
                {
                  "Key": "MinimumHeight",
                  "Value": "100"
                }
              ],
              "Name": "SetPastureVariables",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils;",
                "using Models.Functions;",
                "using APSIM.Shared.Utilities;",
                "using System.Xml.Serialization;",
                "using Models;",
                "using Models.PMF;",
                "using System.Text;",
                "using System.Collections.Generic;",
                "using Models.Core;",
                "using System;",
                "using Models.PMF.Organs;",
                "",
                "namespace Models",
                "{",
                "    [Serializable] ",
                "    public class Script : Model",
                "    {",
                "        [Link] private Plant Slurp;",
                "        [Link] private Clock Clock;",
                "        [Link] private Zone zone;",
                "        [Link(Type = LinkType.Path, Path = \"[Slurp].Root\")]",
                "        private Root root;",
                "",
                "        [Description(\"Use extra root zone\")]",
                "        public bool UseExtraZone { get; set; }",
                "",
                "        ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "            if (UseExtraZone)",
                "            {",
                "            root.ZoneNamesToGrowRootsIn.Add(\"Row\");",
                "            root.ZoneRootDepths.Add(600);",
                "NutrientPoolFunctions InitialDM = new NutrientPoolFunctions();",
                "Constant InitStruct = new Constant();",
                "InitStruct.FixedValue = 10;",
                "InitialDM.Structural = InitStruct;",
                "Constant InitMetab = new Constant();",
                "InitMetab.FixedValue = 0;",
                "InitialDM.Metabolic = InitMetab;",
                "Constant InitStor = new Constant();",
                "InitStor.FixedValue = 0;",
                "InitialDM.Storage = InitStor;",
                "            root.ZoneInitialDM.Add(InitialDM);",
                "",
                "            }",
                "        }",
                "    }",
                "}",
                "       ",
                ""
              ],
              "Parameters": [
                {
                  "Key": "UseExtraZone",
                  "Value": "True"
                }
              ],
              "Name": "SetupPastureRootZones",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Operations, Models",
              "OperationsList": [
                {
                  "$type": "Models.Operation, Models",
                  "Enabled": true,
                  "Date": "2002-05-28",
                  "Action": "[Irrigation].Apply(200);",
                  "Line": "2002-05-28 [Irrigation].Apply(200);"
                }
              ],
              "Name": "WinterRainfall",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils;",
                "using System;",
                "using Models.Core;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        ",
                "    }",
                "}"
              ],
              "Parameters": [],
              "Name": "PlantVariables",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using APSIM.Shared.Utilities;",
                "using Models.Surface;",
                "using Models.Utilities;",
                "using Models.Soils.Nutrients;",
                "using Models.Soils;",
                "using Models.PMF;",
                "using Models.Core;",
                "using System;",
                "using Models.Interfaces;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] private Clock Clock;",
                "        [Link] private Plant Wheat;",
                "        [Link] private ISoilWater SoilWater;",
                "        [Link] private Nutrient nitrogen;",
                "        [Link] private SurfaceOrganicMatter SOM;",
                "        [Link] private Summary Summary;",
                "",
                "        [Description(\"Date to reset on:\")]",
                "        public string ResetDate {get;set;}",
                "",
                "        [Description(\"Reset Water? (Yes or No)\")]",
                "        public string ResetWater {get;set;}",
                "",
                "        [Description(\"Reset Soil Nutrients ? (Yes or No)\")]",
                "        public string ResetNutrients {get;set;}",
                "",
                "        [Description(\"Reset Surface Organic Matter? (Yes or No)\")]",
                "        public string ResetSOM {get;set;}",
                "",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            if (DateUtilities.WithinDates(ResetDate, Clock.Today, ResetDate))",
                "            {",
                "                if (ResetWater == \"Yes\")",
                "                {",
                "                    Summary.WriteMessage(this, \"Reset Water\", MessageType.Diagnostic);",
                "                    SoilWater.Reset();",
                "                }",
                "               ",
                "                 if (ResetNutrients == \"Yes\")",
                "                {",
                "                    Summary.WriteMessage(this, \"Reset Nitrogen\", MessageType.Diagnostic);",
                "                    nitrogen.Reset();",
                "                }",
                "",
                "                if (ResetSOM == \"Yes\")",
                "                {",
                "                    Summary.WriteMessage(this, \"Reset Surface OM\", MessageType.Diagnostic);",
                "                    SOM.Reset();",
                "                }",
                "            }",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "ResetDate",
                  "Value": "10-Jul"
                },
                {
                  "Key": "ResetWater",
                  "Value": "Yes"
                },
                {
                  "Key": "ResetNutrients",
                  "Value": "Yes"
                },
                {
                  "Key": "ResetSOM",
                  "Value": "Yes"
                }
              ],
              "Name": "Reset on date",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": null,
              "ASCSubOrder": null,
              "SoilType": null,
              "LocalName": null,
              "Site": null,
              "NearestTown": null,
              "Region": null,
              "State": null,
              "Country": null,
              "NaturalVegetation": null,
              "ApsoilNumber": null,
              "Latitude": 0.0,
              "Longitude": 0.0,
              "LocationAccuracy": null,
              "YearOfSampling": null,
              "DataSource": null,
              "Comments": null,
              "Name": "Soil",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.LayerStructure, Models",
                  "Thickness": [
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    400.0,
                    400.0,
                    400.0,
                    600.0
                  ],
                  "Name": "LayerStructure",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    200.0,
                    250.0,
                    300.0,
                    150.0,
                    150.0,
                    1950.0
                  ],
                  "ParticleSizeSand": [
                    5.0,
                    5.0,
                    5.0,
                    5.0,
                    5.0,
                    5.0
                  ],
                  "ParticleSizeSilt": [
                    65.0,
                    65.0,
                    65.0,
                    65.0,
                    65.0,
                    65.0
                  ],
                  "ParticleSizeClay": [
                    30.0,
                    30.0,
                    30.0,
                    30.0,
                    30.0,
                    30.0
                  ],
                  "Rocks": [
                    0.0,
                    0.0,
                    0.0,
                    0.2021505376344087,
                    0.2021505376344087,
                    0.19354838709677413
                  ],
                  "Texture": null,
                  "BD": [
                    1.35,
                    1.35,
                    1.4,
                    1.4,
                    1.4,
                    1.59
                  ],
                  "AirDry": [
                    0.1,
                    0.1,
                    0.15,
                    0.13,
                    0.1,
                    0.06
                  ],
                  "LL15": [
                    0.2,
                    0.2,
                    0.15,
                    0.13,
                    0.1,
                    0.06
                  ],
                  "DUL": [
                    0.35,
                    0.35,
                    0.35,
                    0.33,
                    0.28,
                    0.1
                  ],
                  "SAT": [
                    0.45,
                    0.45,
                    0.4,
                    0.35,
                    0.35,
                    0.3
                  ],
                  "KS": null,
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": [
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated"
                  ],
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": [
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated"
                  ],
                  "ParticleSizeSiltMetadata": [
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated"
                  ],
                  "ParticleSizeClayMetadata": [
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated",
                    "Calculated"
                  ],
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.2,
                        0.2,
                        0.15,
                        0.13,
                        0.1,
                        0.06
                      ],
                      "KL": [
                        0.25,
                        0.1,
                        0.08,
                        0.05,
                        0.05,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "KLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "XFMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "Name": "GrapevineSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.2,
                        0.2,
                        0.15,
                        0.13,
                        0.1,
                        0.06
                      ],
                      "KL": [
                        0.11,
                        0.11,
                        0.02,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "KLMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "XFMetadata": [
                        null,
                        null,
                        null,
                        null,
                        null,
                        null
                      ],
                      "Name": "SlurpSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 4.0,
                  "SummerCona": 1.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 4.0,
                  "WinterCona": 1.0,
                  "DiffusConst": 88.0,
                  "DiffusSlope": 35.4,
                  "Salb": 0.18,
                  "CN2Bare": 68.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": 0.0,
                  "CatchmentArea": 0.0,
                  "PSIDul": -100.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    100.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    200.0,
                    400.0,
                    400.0
                  ],
                  "SWCON": [
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55,
                    0.55
                  ],
                  "KLAT": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "Name": "SoilWater",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 30.0,
                  "Thickness": [
                    100.0,
                    200.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    1.82,
                    1.47,
                    1.2,
                    1.03,
                    0.47,
                    0.47
                  ],
                  "CarbonUnits": 0,
                  "SoilCNRatio": [
                    11.5,
                    11.5,
                    11.5,
                    11.5,
                    11.5,
                    11.5
                  ],
                  "FBiom": [
                    0.025,
                    0.025,
                    0.015,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.3,
                    0.4,
                    0.75,
                    0.9,
                    0.96,
                    0.96
                  ],
                  "FOM": [
                    1243.9310541346904,
                    833.8319214727269,
                    457.61666105087295,
                    251.1453484552152,
                    137.83148958311097,
                    75.64352530338392
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    100.0,
                    200.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "PH": [
                    7.0,
                    7.0,
                    7.0,
                    7.0,
                    7.0,
                    7.0
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    200.0,
                    250.0,
                    300.0,
                    150.0,
                    150.0,
                    1950.0
                  ],
                  "InitialValues": [
                    0.35,
                    0.35,
                    0.35,
                    0.33,
                    0.28,
                    0.1
                  ],
                  "InitialPAWmm": 262.5,
                  "RelativeTo": "LL15",
                  "FilledFromTop": true,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.OutputLayers, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    150.0,
                    150.0,
                    150.0,
                    150.0,
                    150.0
                  ],
                  "Name": "OutputLayers",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    100.0,
                    200.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    3.0,
                    2.0,
                    1.0,
                    1.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    100.0,
                    200.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    3.0,
                    1.5,
                    1.2,
                    1.1,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    100.0,
                    200.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}